{"version":3,"file":"bundle.cjs.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require */\n\nimport mongoose from 'mongoose';\nimport _ from 'lodash';\nimport fs from 'fs';\nimport mongodbUri from 'mongodb-uri';\nimport pathUtil from 'path';\nimport Promise from 'bluebird';\n\nconst { Schema } = mongoose;\n\nfunction composeMongodbConnectionString(config) {\n  return mongodbUri.format(config);\n}\n\nfunction lift(done) {\n  let self = this;\n  let modelsConfig = self.config.models;\n  let defaultConnectionName = modelsConfig.connection;\n\n  // custom Promise\n  if (modelsConfig.Promise) {\n    mongoose.Promise = modelsConfig.Promise;\n  }\n\n  // expose mongoose schema types\n  global.ObjectId = Schema.Types.ObjectId;\n  global.Mixed = Schema.Types.Mixed;\n  global.ObjectID = mongoose.mongo.ObjectID;\n\n  self.config.paths.models = pathUtil.resolve(self.config.paths.projectPath, 'models');\n  let modelsPath = self.config.paths.models;\n\n  let readdirAsync = Promise.promisify(fs.readdir);\n  let statAsync = Promise.promisify(fs.stat);\n\n  readdirAsync(modelsPath)\n    .then((fileNames) => {\n      let filePaths = _.map(fileNames, (fileName) => {\n        return pathUtil.join(modelsPath, fileName);\n      });\n\n      return [\n        fileNames,\n        filePaths,\n        Promise.map(filePaths, (filePath) => {\n          let extname = pathUtil.extname(filePath);\n          if (extname !== '.js') {\n            return null;\n          }\n          return statAsync(filePath);\n        }),\n      ];\n    })\n    .spread((fileNames, filePaths, fileStats) => {\n      let connections = {};\n      let models = {};\n      // get model definitions and connection definitions\n      _.each(fileNames, (fileName, index) => {\n        let stat = fileStats[index];\n        if (!stat || !stat.isFile()) {\n          return;\n        }\n\n        let filePath = filePaths[index];\n        let model = require(filePath);\n        let modelName = pathUtil.basename(fileName, '.js');\n\n        models[modelName] = model;\n        model.options = model.options || {};\n\n        // cache connection config\n        model.options.connection = model.options.connection || defaultConnectionName;\n        let connectionName = model.options.connection;\n        let connectionConfig = self.config.connections[connectionName];\n        if (!connectionConfig) {\n          throw new Error(`cannot find connection config for ${connectionName}`);\n        }\n        connections[connectionName] = connectionConfig;\n      });\n\n      // specify native query promise type\n      let connectionOptions = {\n        config: {\n          autoIndex:\n            typeof modelsConfig.autoIndex === 'undefined' ? true : !!modelsConfig.autoIndex,\n        },\n      };\n      if (modelsConfig.Promise) {\n        connectionOptions.promiseLibrary = modelsConfig.Promise;\n      }\n      if (modelsConfig.mongos) {\n        connectionOptions.mongos = true;\n      }\n\n      // create used connections\n      connections = _.mapValues(connections, (connectionConfig) => {\n        let options = _.clone(connectionOptions);\n        return mongoose.createConnection(composeMongodbConnectionString(connectionConfig), options);\n      });\n\n      models = _.mapValues(models, (model, modelName) => {\n        model.options.collection = model.options.collection || modelName.toLowerCase();\n\n        let options = _.extend(\n          {\n            timestamps: true,\n          },\n          model.options\n        );\n        delete options.connection;\n\n        let schema = new Schema(model.attributes, options);\n        if (model.schemaInitializer) {\n          model.schemaInitializer(schema);\n        }\n        let connectionName = model.options.connection || defaultConnectionName;\n        return connections[connectionName].model(modelName, schema);\n      });\n\n      self.models = models;\n      _.extend(global, self.models);\n      return null;\n    })\n    .then(_.ary(done, 0))\n    .catch(done);\n}\n\nfunction lower(done) {\n  mongoose.disconnect(done);\n}\n\nexport default {\n  lift: Promise.promisify(lift),\n  lower: Promise.promisify(lower),\n};\n"],"names":["mongoose","composeMongodbConnectionString","config","mongodbUri","format","lift","done","self","modelsConfig","models","defaultConnectionName","connection","Promise","ObjectId","Schema","Types","Mixed","ObjectID","mongo","paths","pathUtil","resolve","projectPath","modelsPath","readdirAsync","promisify","fs","readdir","statAsync","stat","then","fileNames","filePaths","_","map","fileName","join","filePath","extname","spread","fileStats","connections","each","index","isFile","model","require","modelName","basename","options","connectionName","connectionConfig","Error","connectionOptions","autoIndex","promiseLibrary","mongos","mapValues","clone","createConnection","collection","toLowerCase","extend","schema","attributes","schemaInitializer","global","ary","catch","lower","disconnect"],"mappings":"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"}